/*
 * TabPersonagensGui.java
 *
 * Created on April 23, 2008, 11:37 AM
 */
package gui.tabs;

import baseLib.GenericoComboObject;
import business.facade.JogadorFacade;
import business.facade.PersonagemFacade;
import control.MapaControler;
import control.PersonagemControler;
import control.PortraitControler;
import control.facade.WorldFacadeCounselor;
import control.services.FiltroConverter;
import control.services.PersonagemConverter;
import gui.TabBase;
import gui.services.IAcaoGui;
import gui.services.LifeTableCellRenderer;
import gui.subtabs.SubTabBaseList;
import gui.subtabs.SubTabOrdem;
import gui.subtabs.SubTabPopup;
import java.io.Serializable;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableModel;
import model.ActorAction;
import model.Personagem;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import persistence.local.WorldManager;
import persistenceCommons.BundleManager;
import persistenceCommons.SettingsManager;
import persistenceCommons.SysApoio;
import utils.OpenSlotCounter;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 *
 * @author gurgel
 */
public class TabPersonagensGui extends TabBase implements Serializable, IAcaoGui {

    private static final Log LOG = LogFactory.getLog(TabPersonagensGui.class);
    private static final BundleManager labels = SettingsManager.getInstance().getBundleManager();
    private PersonagemControler personagemControl;
    private final PersonagemFacade personagemFacade = new PersonagemFacade();
    private final JogadorFacade jogadorFacade = new JogadorFacade();
    private Personagem personagemAtivo;
    private final SubTabPopup stResults = new SubTabPopup();
    private final SubTabBaseList stMagicItems = new SubTabBaseList();
    private final SubTabBaseList stSpells = new SubTabBaseList();
    private SubTabOrdem stOrdens;
    private final PortraitControler portraitControler;
    private boolean showPortrait = SettingsManager.getInstance().isConfig("ShowCharacterPortraits", "1", "0"); //must be initialized BEFORE initComponents();
    private LifeTableCellRenderer ltcr;

    /**
     * Creates new form TabPersonagensGui
     */
    public TabPersonagensGui(String titulo, String dica, MapaControler mapaControl) {
        initComponents();
        //Basico do constructor
        this.portraitControler = new PortraitControler(this.portraitPanel);
        this.setMapaControler(mapaControl);
        setIcone("/images/hex_personagem.gif");
        setTitle(titulo);
        setDica(dica);
        this.setKeyFilterProperty("GuiFilterChars");

        iniciaConfig();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpMaster = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        comboFiltro = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        qtPersonagens = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtMainLista = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        detalhesPersonagem = new javax.swing.JTabbedPane();
        portraitPanel = new javax.swing.JPanel();

        jLabel3.setLabelFor(comboFiltro);
        jLabel3.setText(labels.getString("LISTAR:")); // NOI18N

        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Todos", "Próprios" }));

        jLabel2.setLabelFor(qtPersonagens);
        jLabel2.setText(labels.getString("TOTAL:")); // NOI18N

        qtPersonagens.setText(labels.getString("QTD")); // NOI18N
        qtPersonagens.setFocusable(false);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("labels"); // NOI18N
        jLabel1.setText(bundle.getString("TAB.SEARCH.LABEL")); // NOI18N

        searchField.setToolTipText(bundle.getString("TAB.SEARCH.TOOLTIP")); // NOI18N
        searchField.setMinimumSize(new java.awt.Dimension(80, 20));
        searchField.setPreferredSize(new java.awt.Dimension(80, 20));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qtPersonagens))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(qtPersonagens)
                    .addComponent(jLabel2)
                    .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(SysApoio.parseInt(SettingsManager.getInstance().getConfig("charSplitSize", "200")));
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSplitPane1PropertyChange(evt);
            }
        });

        jScrollPane3.setBorder(null);
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane3.setMaximumSize(new java.awt.Dimension(200, 600));
        jScrollPane3.setOpaque(false);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(200, 200));

        jtMainLista.setAutoCreateRowSorter(true);
        jtMainLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome", "Tamanho", "Nação", "Local", "Title 5"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtMainLista.setName(""); // NOI18N
        jScrollPane3.setViewportView(jtMainLista);

        jSplitPane1.setTopComponent(jScrollPane3);

        portraitPanel.setFocusable(false);
        portraitPanel.setPreferredSize(new java.awt.Dimension(140, 250));

        javax.swing.GroupLayout portraitPanelLayout = new javax.swing.GroupLayout(portraitPanel);
        portraitPanel.setLayout(portraitPanelLayout);
        portraitPanelLayout.setHorizontalGroup(
            portraitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );
        portraitPanelLayout.setVerticalGroup(
            portraitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        showPortrait = Integer.parseInt(SettingsManager.getInstance().getConfig("ShowCharacterPortraits", "0")) == 1;
        portraitPanel.setVisible(showPortrait);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(6)
        			.addComponent(portraitPanel, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(detalhesPersonagem, GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(portraitPanel, GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
        		.addComponent(detalhesPersonagem, GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
        );
        jPanel1.setLayout(jPanel1Layout);

        detalhesPersonagem.getAccessibleContext().setAccessibleName("Ações");

        jSplitPane1.setRightComponent(jPanel1);

        javax.swing.GroupLayout jpMasterLayout = new javax.swing.GroupLayout(jpMaster);
        jpMaster.setLayout(jpMasterLayout);
        jpMasterLayout.setHorizontalGroup(
            jpMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jpMasterLayout.setVerticalGroup(
            jpMasterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpMasterLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpMaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpMaster, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSplitPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSplitPane1PropertyChange
        if (evt.getPropertyName().equals(javax.swing.JSplitPane.DIVIDER_LOCATION_PROPERTY)) {
            String splitHeight = evt.getNewValue().toString();
            LOG.debug("Split character pane divisor modified to " + splitHeight + " px.");
            SettingsManager.getInstance().setConfig("charSplitSize", splitHeight);
        }
    }//GEN-LAST:event_jSplitPane1PropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboFiltro;
    private javax.swing.JTabbedPane detalhesPersonagem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel jpMaster;
    private javax.swing.JTable jtMainLista;
    private javax.swing.JPanel portraitPanel;
    private javax.swing.JLabel qtPersonagens;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
    // FIM das Constantes para busca das chaves no banco.

    private void iniciaConfig() {
        //Cria o Controle da lista de Personagem
        personagemControl = new PersonagemControler(this);

        stOrdens = new SubTabOrdem(this, getMapaControler());

        //configura grid de personagens
        comboFiltro.setName("comboFiltro");
        comboFiltro.setModel(FiltroConverter.getFiltroComboModelByJogador(WorldManager.getInstance().getPartida().getJogadorAtivo(), 2));
        comboFiltro.setSelectedIndex(this.getFiltroDefault());
        jtMainLista.setAutoCreateColumnsFromModel(true);
        jtMainLista.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jtMainLista.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtMainLista.setAutoCreateRowSorter(true);

        //adiciona listeners
        addDocumentListener(searchField);
        comboFiltro.addActionListener(personagemControl);
        jtMainLista.getSelectionModel().addListSelectionListener(personagemControl);
        ltcr = new LifeTableCellRenderer(
                SettingsManager.getInstance().getConfigAsInt("LifeLimitRed", "25"),
                SettingsManager.getInstance().getConfigAsInt("LifeLimitAmber", "60")
        );
        doAddTabs();
        doLoadChars();
    }

    public Personagem getPersonagem() {
        return personagemAtivo;
    }

    public void setPersonagem(Personagem personagem) {
        this.personagemAtivo = personagem;
    }

    public JTable getMainLista() {
        return jtMainLista;
    }

    /*
     * recebe o valor do filtro, capturado pelo controler
     */
    public void setMainModel(TableModel model) {
        this.jtMainLista.setModel(model);
        this.doConfigTableColumns(jtMainLista);
        jtMainLista.getColumnModel().getColumn(jtMainLista.getColumn(labels.getString("VITALIDADE")).getModelIndex()).setCellRenderer(ltcr);
        this.doTagHide();
        this.qtPersonagens.setText(getMainLista().getRowCount() + "");
        //seta primeira linha da tablemaster como selecionado e forca a carga dos detalhes.
        this.jtMainLista.getSelectionModel().setSelectionInterval(0, 0);
    }

    @Override
    public void setValueAt(ActorAction actorAction, int ordIndex, int openSlotsQt) {
        final int columnIndex;
        if (SettingsManager.getInstance().isConfig("CharOpenSlotColumn", "1", "0")) {
            //wants the column displayed
            //set Col=1 at front, before skills so that it doesn't have to calculate where is the column.
            OpenSlotCounter openSlotCounter = (OpenSlotCounter) this.jtMainLista.getModel().getValueAt(personagemControl.getModelRowIndex(), 1);
            openSlotCounter.setOpenSlotQt(openSlotsQt);
            this.jtMainLista.getModel().setValueAt(openSlotCounter,
                    personagemControl.getModelRowIndex(),
                    1);
            columnIndex = PersonagemConverter.ORDEM_COL_INDEX_START + ordIndex + 1;
        } else {
            columnIndex = PersonagemConverter.ORDEM_COL_INDEX_START + ordIndex;
        }
        this.jtMainLista.getModel().setValueAt(actorAction,
                personagemControl.getModelRowIndex(), columnIndex);
    }

    public void doLoadChars() {
        //carrega a lista de personagens
        TableModel model = personagemControl.getMainTableModel((GenericoComboObject) comboFiltro.getSelectedItem());
        this.setMainModel(model);
    }

    public void doPersonagemClear() {
        this.doTagHide();
        stOrdens.doOrdemClear();
    }

    private void doConfigTabs() {
        final String popupTitle = labels.getString("RESULTADOS.OF") + ": " + personagemControl.getNome();
        stResults.setText(popupTitle, personagemControl.getResultado());
        doTabMagicItem();
        doTabSpells();
    }

    private void doTabSpells() {
        if (personagemFacade.isMago(personagemAtivo)) {
            stSpells.setListModel(personagemControl.getFeiticoTableModel());
        } else {
            stSpells.setListModelClear();
        }
    }

    private void doTabMagicItem() {
        if (personagemFacade.hasArtefatos(getPersonagem())) {
            stMagicItems.setListModel(personagemControl.getArtefatoTableModel());
            detalhesPersonagem.addTab(labels.getString("ARTEFATOS"),
                    new javax.swing.ImageIcon(getClass().getResource("/images/hex_artefato.gif")),
                    stMagicItems, labels.getString("ARTEFATOS.TOOLTIP"));
        } else {
            detalhesPersonagem.remove(stMagicItems);
        }
    }

    private void doAddTabs() {
        //config tabs
        stResults.setFontText(detalhesPersonagem.getFont());
        stResults.setGuiConfig("GuiPcResults");
        detalhesPersonagem.addTab(labels.getString("ACAO"),
                new javax.swing.ImageIcon(getClass().getResource("/images/hex_personagem.gif")),
                stOrdens, labels.getString("ORDERNS.TOOLTIP"));
        detalhesPersonagem.addTab(labels.getString("RESULTADOS"),
                new javax.swing.ImageIcon(getClass().getResource("/images/write-document-20x20.png")),
                stResults, labels.getString("RESULTADOS.TOOLTIP"));
        if (WorldFacadeCounselor.getInstance().isSpells()) {
            detalhesPersonagem.addTab(labels.getString("FEITICOS"),
                    new javax.swing.ImageIcon(getClass().getResource("/images/middle.gif")),
                    stSpells, labels.getString("FEITICOS.TOOLTIP"));
        }
    }

    public void doPersonagemMuda(Personagem personagem) {
        setPersonagem(personagem);
        getMapaControler().printTag(personagemFacade.getLocal(personagem));
        doConfigTabs();
        portraitControler.showPortrait(personagem);
        //verifica se o personagem pode receber ordens...
        if (jogadorFacade.isMine(personagem, WorldFacadeCounselor.getInstance().getJogadorAtivo())
                && personagemFacade.isAtivo(personagem)) {
            //can receive orders
            stOrdens.doMudaActor(personagem);
        } else if (personagemFacade.isAtivo(personagem)) {
            //should list orders
            stOrdens.doMudaActor(personagem);
        } else {
            //refem ou morto, nao pode dar ordem
            //forca selecao para vazio, limpando quadro de parametros
            stOrdens.doOrdemClear();
        }
    }

    @Override
    protected int getComboFiltroSize() {
        return this.comboFiltro.getModel().getSize();
    }
}
