/*
 * TabNacoesGui.java
 *
 * Created on April 23, 2008, 11:37 AM
 */
package gui.tabs;

import baseLib.GenericoComboObject;
import business.facade.AcaoFacade;
import business.facade.CenarioFacade;
import business.facade.JogadorFacade;
import business.facade.NacaoFacade;
import control.MapaControler;
import control.NacaoControler;
import control.facade.WorldFacadeCounselor;
import control.services.FiltroConverter;
import control.services.NacaoConverter;
import gui.TabBase;
import gui.services.IAcaoGui;
import gui.services.LimitTableCellRenderer;
import gui.subtabs.SubTabAccordionPanel;
import gui.subtabs.SubTabBaseList;
import gui.subtabs.SubTabOrdem;
import gui.subtabs.SubTabTextArea;
import java.io.Serializable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableModel;
import model.ActorAction;
import model.Habilidade;
import model.HabilidadeNacao;
import model.Local;
import model.Nacao;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import persistence.local.ListFactory;
import persistence.local.WorldManager;
import persistenceCommons.BundleManager;
import persistenceCommons.SettingsManager;

/**
 *
 * @author gurgel
 */
public class TabNacoesGui extends TabBase implements Serializable, IAcaoGui {

    private static final Log LOG = LogFactory.getLog(TabNacoesGui.class);
    private static final BundleManager labels = SettingsManager.getInstance().getBundleManager();
    private NacaoControler nacaoControl;
    private static final AcaoFacade acaoFacade = new AcaoFacade();
    private final NacaoFacade nacaoFacade = new NacaoFacade();
    private final CenarioFacade cenarioFacade = new CenarioFacade();
    private final JogadorFacade jogadorFacade = new JogadorFacade();
    private final SubTabTextArea stResults = new SubTabTextArea();
    private SubTabAccordionPanel accordionCombats;
    private final SubTabBaseList stDiplomacy = new SubTabBaseList();
    private final SubTabBaseList stDiplomacyAll = new SubTabBaseList();
    private final SubTabBaseList stTroops = new SubTabBaseList();
    private SubTabOrdem stOrdens;
    private LimitTableCellRenderer ltcr;

    public TabNacoesGui(String titulo, String dica, MapaControler mapaControl) {
        initComponents();
        //Basico
        setIcone("/images/nation-icon.png");
        setTitle(titulo);
        setDica(dica);
        this.setKeyFilterProperty("GuiFilterNation");

        this.setMapaControler(mapaControl);
        initConfig();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboFiltro = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        qtNacoes = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtMainLista = new javax.swing.JTable();
        detalhesNacao = new javax.swing.JTabbedPane();

        jLabel2.setText(labels.getString("TOTAL:")); // NOI18N

        comboFiltro.setModel(getDefaultComboBoxModelTodosProprio());

        jLabel1.setText(labels.getString("LISTAR:")); // NOI18N

        qtNacoes.setText("66666"); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("labels"); // NOI18N
        jLabel3.setText(bundle.getString("TAB.SEARCH.LABEL")); // NOI18N

        searchField.setToolTipText(bundle.getString("TAB.SEARCH.TOOLTIP")); // NOI18N
        searchField.setMinimumSize(new java.awt.Dimension(80, 20));
        searchField.setPreferredSize(new java.awt.Dimension(80, 20));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(qtNacoes)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(qtNacoes)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(SettingsManager.getInstance().getConfigAsInt("nationsSplitSize", "200"));
        jSplitPane1.setDividerSize(3);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setAutoscrolls(true);
        jSplitPane1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSplitPane1PropertyChange(evt);
            }
        });

        jScrollPane3.setBorder(null);

        jtMainLista.setAutoCreateRowSorter(true);
        jtMainLista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nome", "Tamanho", "Nação", "Local", "Title 5"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtMainLista.setName(""); // NOI18N
        jScrollPane3.setViewportView(jtMainLista);

        jSplitPane1.setLeftComponent(jScrollPane3);
        jSplitPane1.setBottomComponent(detalhesNacao);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSplitPane1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSplitPane1PropertyChange
        if (evt.getPropertyName().equals(javax.swing.JSplitPane.DIVIDER_LOCATION_PROPERTY)) {
            String splitHeight = evt.getNewValue().toString();
            LOG.debug("Split nations pane divisor modified to " + splitHeight + " px.");
            SettingsManager.getInstance().setConfig("nationsSplitSize", splitHeight);
        }
    }//GEN-LAST:event_jSplitPane1PropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox comboFiltro;
    private javax.swing.JTabbedPane detalhesNacao;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jtMainLista;
    private javax.swing.JLabel qtNacoes;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables

    @Override
    public JTable getMainLista() {
        return jtMainLista;
    }

    public final void setMainModel(TableModel model) {
        //clear stuff
        stResults.setText("");
        accordionCombats.removeAll();
        stDiplomacy.setListModelClear();
        stDiplomacyAll.setListModelClear();
        stTroops.setListModelClear();
        //set model
        this.jtMainLista.setModel(model);
        //confid red background
        if (WorldFacadeCounselor.getInstance().isNationPackages()) {
            jtMainLista.getColumnModel().getColumn(NacaoConverter.ORDEM_COL_INDEX_START).setCellRenderer(ltcr);
        }
        //auto adjust columns
        this.doConfigTableColumns(jtMainLista);
        this.updateGui();
        this.doTagHide();
        //trigger change
        this.jtMainLista.getSelectionModel().setSelectionInterval(0, 0);
    }

    public GenericoComboObject getFiltro() {
        return (GenericoComboObject) comboFiltro.getSelectedItem();
    }

    private void updateGui() {
        this.qtNacoes.setText(getMainLista().getRowCount() + "");
    }

    private void initConfig() {
        stOrdens = new SubTabOrdem(this, getMapaControler());
        accordionCombats = new SubTabAccordionPanel(getMapaControler());
        //configura grid
        jtMainLista.setAutoCreateColumnsFromModel(true);
        jtMainLista.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jtMainLista.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jtMainLista.setAutoCreateRowSorter(true);
        comboFiltro.setName("comboFiltro");
        comboFiltro.setActionCommand("comboFiltro");
        comboFiltro.setModel(FiltroConverter.getFiltroComboModelByJogador(WorldManager.getInstance().getPartida().getJogadorAtivo(), 6));
        comboFiltro.setSelectedIndex(this.getFiltroDefault());

        //Cria o Controle da lista 
        nacaoControl = new NacaoControler(this);
        stResults.setFontText(detalhesNacao.getFont());
        addTabs();
        //adiciona listeners
        addDocumentListener(searchField);
        comboFiltro.addActionListener(nacaoControl);
        jtMainLista.getSelectionModel().addListSelectionListener(nacaoControl);
        //rendered
        if (WorldFacadeCounselor.getInstance().isNationPackages()) {
            ltcr = new LimitTableCellRenderer(WorldFacadeCounselor.getInstance().getNationPackagesLimit());
        }
        final TableModel model = nacaoControl.getMainTableModel(this.getFiltro());
        this.setMainModel(model);
    }

    private void addTabs() {
        if (cenarioFacade.hasOrdensNacao(WorldFacadeCounselor.getInstance().getPartida())) {
            detalhesNacao.addTab(labels.getString("STARTUP"),
                    new javax.swing.ImageIcon(getClass().getResource("/images/package_icon.gif")),
                    stOrdens, labels.getString("STARTUP.TOOLTIP"));
        }
        detalhesNacao.addTab(labels.getString("RESULTADOS"),
                new javax.swing.ImageIcon(getClass().getResource("/images/write-document-20x20.png")),
                stResults, labels.getString("RESULTADOS.TOOLTIP"));
        detalhesNacao.addTab(labels.getString("RESULTADOS.COMBAT"),
                new javax.swing.ImageIcon(getClass().getResource("/images/combat.png")),
                accordionCombats, labels.getString("RESULTADOS.COMBAT.TOOLTIP"));
        detalhesNacao.addTab(labels.getString("DIPLOMACY"),
                new javax.swing.ImageIcon(getClass().getResource("/images/diplomacy.gif")),
                stDiplomacy, labels.getString("DIPLOMACY.TOOLTIP"));
        detalhesNacao.addTab(labels.getString("DIPLOMACY.ALL"),
                new javax.swing.ImageIcon(getClass().getResource("/images/diplomacy.gif")),
                stDiplomacyAll, labels.getString("DIPLOMACY.ALL.TOOLTIP"));
        detalhesNacao.addTab(labels.getString("TROPAS"),
                new javax.swing.ImageIcon(getClass().getResource("/images/hex_exercito.gif")),
                stTroops, labels.getString("TROPAS.DISPONIVEL"));
    }

    @Override
    public void setValueAt(ActorAction actorAction, int ordIndex, int openSlotsQt) {
        //set how many points were selected
        final int points = acaoFacade.getPointsSetup(stOrdens.getActor().getNacao());
        this.jtMainLista.getModel().setValueAt(points,
                nacaoControl.getModelRowIndex(),
                NacaoConverter.ORDEM_COL_INDEX_START);
    }

    private void setResults(Nacao nacao) {
        String hab = labels.getString("HABILIDADES.ESPECIAIS") + "\n";
        for (HabilidadeNacao elem : nacaoFacade.getHabilidadesNacao(nacao)) {
            hab += String.format("- %s\n", elem.getNome());
        }
        for (Habilidade elem : nacaoFacade.getHabilidades(nacao)) {
            try {
                if (!elem.isFilter()) {
                    hab += String.format("- %s\n", elem.getNome());
                }
            } catch (NullPointerException ex) {
            }
        }
        try {
            for (String msg : nacaoFacade.getMensagensResultsRumoresEncontros(nacao)) {
//                hab += "\n\n\n" + msg.replace(',', '\n');
                hab += "\n\n\n" + msg;
            }
        } catch (NullPointerException ex) {
            //just skip
            hab += labels.getString("?");
        }
        stResults.setText(hab);
    }

    private void setCombats(Nacao nacao) {
        boolean areCombats = false;
        try {
            accordionCombats.removeAll();
            for (String msg : nacaoFacade.getMensagensCombatesDuelos(nacao)) {
                String title = msg.substring(0, msg.indexOf("."));
                String message = msg.substring(msg.indexOf(".") + 1);
                final SubTabTextArea subTabTextArea = new SubTabTextArea();

                subTabTextArea.setFontText(detalhesNacao.getFont());
                subTabTextArea.setText(message);
                Local hexCombat = (new ListFactory()).getLocal(getLocationFromDescription(title));
                accordionCombats.addBar(title.trim(), subTabTextArea, hexCombat);
                areCombats = true;
            }
            if (!areCombats) {
                accordionCombats.addBar("No data", new JPanel(), null);
            }

        } catch (NullPointerException ex) {
            //just skip
        }
    }

    public void doMudaNacao(Nacao nacao) {
        try {
            getMapaControler().printTag(nacaoFacade.getLocal(nacao));
        } catch (NullPointerException ex) {
            this.doTagHide();
        }
        stDiplomacy.setListModel(nacaoControl.getRelacionamentoTableModel(nacao));
        stDiplomacyAll.setListModel(nacaoControl.getRelacionamentoAllTableModel());
        stTroops.setListModel(nacaoControl.getTropaTableModel(nacao));
        setResults(nacao);
        setCombats(nacao);
        if (jogadorFacade.isMine(nacao, WorldFacadeCounselor.getInstance().getJogadorAtivo())
                && nacaoFacade.isAtiva(nacao)) {
            //can receive orders
            stOrdens.doMudaActor(nacao);
        } else {
            //forca selecao para vazio, limpando quadro de parametros
            stOrdens.doOrdemClear();
        }
    }

    @Override
    protected int getComboFiltroSize() {
        return this.comboFiltro.getModel().getSize();
    }

    private String getLocationFromDescription(String line) {
        Pattern pattern = Pattern.compile("\\d{4}");
        Matcher matcher = pattern.matcher(line);
        if (matcher.find()) {
            return matcher.group();
        }
        return null;
    }
}